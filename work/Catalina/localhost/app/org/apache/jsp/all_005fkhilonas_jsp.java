/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-02-08 16:35:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import models.Khilona;
import java.util.ArrayList;
import models.User;

public final class all_005fkhilonas_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/menu.jsp", Long.valueOf(1661784054000L));
    _jspx_dependants.put("/menu2.jsp", Long.valueOf(1661868798000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("models.User");
    _jspx_imports_classes.add("models.Khilona");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("        #no_rec {\r\n");
      out.write("            border: 1px solid #999;\r\n");
      out.write("            background-color: #eee;\r\n");
      out.write("            color: #555;\r\n");
      out.write("            margin: 10px auto;\r\n");
      out.write("            width: 30%;\r\n");
      out.write("            font-family: verdana;\r\n");
      out.write("            padding-top: 30px; \r\n");
      out.write("            padding-bottom: 30px;\r\n");
      out.write("            text-align: center; \r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    \r\n");
      out.write("    <h1>All Khilona's Page</h1>\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
 User user = (User)session.getAttribute("user"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
 if(user==null) { 
      out.write("\r\n");
      out.write("    <a href=\"login.do\">Signin</a>\r\n");
      out.write("    <a href=\"register.do\">Signup</a>\r\n");
 } else { 
      out.write("\r\n");
      out.write("    <a href=\"logout.do\">Signout</a>\r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("<hr>\r\n");
      out.write("Hello ");
      out.print( user.getName() );
      out.write("\r\n");
      out.write("\r\n");
 if(user.getUserType() == 1) { 
      out.write("\r\n");
      out.write("    <a href=\"add.do\">Add New Khilona</a>\r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<a href=\"show.do\">Show All Khilonas</a>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
 ArrayList<Khilona> khilonas = (ArrayList<Khilona>)request.getAttribute("all_khilonas"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
 if(!khilonas.isEmpty()) { 
      out.write("\r\n");
      out.write("        <table border=\"1\" align=\"center\" width=\"auto\">\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Sr.No</th>\r\n");
      out.write("                <th>Name</th>\r\n");
      out.write("                <th>Price</th>\r\n");
      out.write("                <th>Age-Group</th>\r\n");
      out.write("                <th>Quantity</th>\r\n");
      out.write("                ");
 if(user.getUserType()==1){ 
      out.write("\r\n");
      out.write("                    <th>Action</th>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </tr>\r\n");
      out.write("    \r\n");
      out.write("            ");
 int i = 0; 
      out.write("\r\n");
      out.write("    \r\n");
      out.write("            ");
 for(Khilona khilona : khilonas) { 
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print( ++i );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( khilona.getName() );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( khilona.getPrice() );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( khilona.getAgeGroup() );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( khilona.getQuantity() );
      out.write("</td>\r\n");
      out.write("                    ");
 if(user.getUserType()==1){ 
      out.write("\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <a href=\"del.do?kid=");
      out.print( khilona.getKhilonaId() );
      out.write("\">Delete</a>\r\n");
      out.write("                            <a href=\"update.do?kid=");
      out.print( khilona.getKhilonaId() );
      out.write("\">Update</a>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </table>    \r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("        <div id=\"no_rec\">\r\n");
      out.write("            No Khilona Records Found... \r\n");
      out.write("            ");
 if(user.getUserType() == 1) { 
      out.write("\r\n");
      out.write("                <a href=\"add.do\">Add New Khilona</a>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
